import React, { useEffect, useState, useRef } from 'react';
import { View, Text, StyleSheet, Image, ScrollView, TouchableOpacity, Dimensions, Animated, Alert } from 'react-native';
import AboutScreen from './AboutScreen';
import ApplyDetailScreen from './ApplyDetailScreen';
import CourseDetailScreen from './CourseDetailScreen';
let WebView;
try { WebView = require('react-native-webview').WebView; } catch (e) { WebView = null; }

const HEADER_HEIGHT = 100;
const { API_BASE } = require('../config');

const MainScreen = ({ user, onLogout }) => {
  const [home, setHome] = useState(null);
  const [modules, setModules] = useState([]);
  const [error, setError] = useState(null);

  const [drawerOpen, setDrawerOpen] = useState(false);
  const drawerX = useRef(new Animated.Value(-360)).current;

  // simple in-file stack for native pages
  const [stack, setStack] = useState([]);
  const push = (s) => setStack(st => [...st, s]);
  const pop = () => setStack(st => st.slice(0, -1));
  const top = stack.length ? stack[stack.length - 1] : null;

  useEffect(() => { loadAll(); }, []);

  async function loadAll() {
    setError(null);
    try {
      const [hRes, mRes] = await Promise.all([
        fetch(`${API_BASE}/api/home`).then(r => r.json()),
        fetch(`${API_BASE}/api/modules`).then(r => r.json()),
      ]);
      if (hRes && hRes.home) setHome(hRes.home);
      if (mRes && mRes.modules) setModules(mRes.modules);
    } catch (err) {
      console.error('loadAll error', err);
      setError(String(err));
    }
  }

  useEffect(() => {
    const target = drawerOpen ? 0 : -Math.max(320, Math.round(Dimensions.get('window').width * 0.85));
    Animated.timing(drawerX, { toValue: target, duration: 260, useNativeDriver: true }).start();
  }, [drawerOpen]);

  // Dashboard fetch (if user logged in)
  const [dashboard, setDashboard] = useState(null);
  useEffect(() => { if (user && user.id) fetchDashboard(user.id); }, [user]);
  async function fetchDashboard(userId) {
    try {
      const r = await fetch(`${API_BASE}/api/dashboard?userId=${encodeURIComponent(userId)}`);
      if (!r.ok) return setDashboard({ message: 'No dashboard available' });
      const j = await r.json();
      setDashboard(j);
    } catch (err) {
      console.warn('dashboard fetch failed', err);
      setDashboard({ message: 'Dashboard fetch failed' });
    }
  }

  // helpers
  const findCourseByUrl = (url) => {
    for (const m of modules || []) {
      if (!m.items) continue;
      const found = m.items.find(i => i.url === url || i.title === url);
      if (found) return found;
    }
    return null;
  };

  const renderHome = () => (
    <ScrollView contentContainerStyle={styles.content}>
      <View style={styles.hero}>
        <Image source={require('../../assets/logo.png')} style={styles.headerLogo} resizeMode="contain" />
        <Text style={styles.heroTitle}>{home?.hero?.title || 'Welcome to Educativo'}</Text>
        <Text style={styles.heroSubtitle}>{home?.hero?.subtitle || ''}</Text>
        <View style={styles.ctaRow}>
          <TouchableOpacity style={styles.ctaPrimary} onPress={() => { const m = modules.find(x => x.id === 'courses'); if (m) { push({ name: 'coursesIndex' }); setDrawerOpen(true); } }}><Text style={styles.ctaPrimaryText}>{home?.hero?.ctaPrimary || 'Explore Courses'}</Text></TouchableOpacity>
          <TouchableOpacity style={styles.ctaGhost} onPress={() => push({ name: 'apply', params: { course: '' } })}><Text style={styles.ctaGhostText}>{home?.hero?.ctaSecondary || 'Apply'}</Text></TouchableOpacity>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Featured</Text>
        {(home?.featuredCourses || []).map((c, i) => (
          <View key={i} style={styles.courseCard}>
            <View style={styles.courseInfo}><Text style={styles.courseTitle}>{c.title}</Text><Text style={styles.courseSubtitle}>{c.subtitle}</Text></View>
            <TouchableOpacity style={styles.applyBtn} onPress={() => push({ name: 'course', params: { course: c } })}><Text style={styles.applyText}>View</Text></TouchableOpacity>
          </View>
        ))}
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Partners</Text>
        <View style={styles.partnersRow}>{(home?.partners || []).map((p, i) => <View key={i} style={styles.partnerBox}><Text style={styles.partnerText}>{p}</Text></View>)}</View>
      </View>

      <View style={{ height: 80 }} />
    </ScrollView>
  );

  const renderCoursesIndex = () => {
    const cmod = modules.find(m => m.id === 'courses') || { items: [] };
    return (
      <ScrollView contentContainerStyle={styles.content}>
        <Text style={styles.sectionTitle}>All Courses</Text>
        {cmod.items.map((it, idx) => (
          <TouchableOpacity key={idx} style={styles.courseListItem} onPress={() => push({ name: 'course', params: { course: it } })}>
            <View style={{ flex: 1 }}><Text style={styles.courseTitle}>{it.title}</Text><Text style={styles.courseSubtitle}>{it.subtitle}</Text></View>
            <Text style={{ color: '#999' }}>›</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
    );
  };

  const renderDashboard = () => (
    <ScrollView contentContainerStyle={styles.content}>
      <Text style={styles.sectionTitle}>My Dashboard</Text>
      {user ? (
        dashboard ? (
          <View>
            {dashboard.courses ? dashboard.courses.map((c, i) => (
              <View key={i} style={{ padding: 12, borderRadius: 8, backgroundColor: '#fff', marginBottom: 10, borderWidth: 1, borderColor: '#eee' }}>
                <Text style={{ fontWeight: '700' }}>{c.title}</Text>
                <Text style={{ color: '#666' }}>{c.status || 'Enrolled'}</Text>
              </View>
            )) : <Text>{dashboard.message || 'No courses yet'}</Text>}
          </View>
        ) : <Text>Loading dashboard…</Text>
      ) : (
        <View><Text>Please log in to see your dashboard.</Text></View>
      )}
    </ScrollView>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity style={styles.hamburger} onPress={() => setDrawerOpen(s => !s)}>
          <View style={styles.hLine} /><View style={styles.hLine} /><View style={styles.hLine} />
        </TouchableOpacity>
        <Image source={require('../../assets/logo.png')} style={styles.headerLogo} resizeMode="contain" />
        <TouchableOpacity style={styles.logoutTop} onPress={onLogout}><Text style={styles.logoutTopText}>Logout</Text></TouchableOpacity>
      </View>

      <View style={styles.body}>
        {top ? (
          <View style={{ flex: 1 }}>
            <View style={styles.stackHeader}><TouchableOpacity onPress={pop}><Text style={{ fontSize: 18 }}>←</Text></TouchableOpacity><Text style={{ fontWeight: '700', marginLeft: 10 }}>{top.name}</Text></View>
            {top.name === 'about' && <AboutScreen home={home} />}
            {top.name === 'apply' && <ApplyDetailScreen apiBase={API_BASE} initialCourse={top.params?.course} onDone={() => pop()} />}
            {top.name === 'course' && <CourseDetailScreen course={top.params?.course} onApply={(c) => push({ name: 'apply', params: { course: c.title } })} />}
            {top.name === 'coursesIndex' && renderCoursesIndex()}
            {top.name === 'dashboard' && renderDashboard()}
          </View>
        ) : (
          (error ? (
            <View style={styles.placeholder}><Text style={{ color: '#c62828' }}>Failed to load content: {error}</Text><TouchableOpacity onPress={loadAll} style={{ marginTop: 8 }}><Text style={{ color: '#0b5ed7' }}>Retry</Text></TouchableOpacity></View>
          ) : renderHome())
        )}
      </View>

      <Animated.View style={[styles.drawer, { transform: [{ translateX: drawerX }] }]}> 
        <View style={styles.drawerHeader}><Text style={{ fontWeight: '700' }}>Menu</Text><TouchableOpacity onPress={() => setDrawerOpen(false)}><Text>✕</Text></TouchableOpacity></View>
        <ScrollView>
          {modules.map(m => (
            <View key={m.id}>
              <TouchableOpacity style={styles.moduleBtn} onPress={() => {
                if (m.id === 'courses') { setDrawerOpen(false); push({ name: 'coursesIndex' }); }
                else if (m.url) {
                  const native = findCourseByUrl(m.url);
                  if (native) { setDrawerOpen(false); push({ name: 'course', params: { course: native } }); }
                  else { setDrawerOpen(false); /* open URL via WebView at top */ push({ name: 'openurl', params: { url: m.url } }); }
                }
              }}>
                <Text style={styles.moduleText}>{m.title}</Text>
              </TouchableOpacity>
              {m.items && m.items.map(it => (
                <TouchableOpacity key={it.title} style={styles.subitemBtn} onPress={() => { setDrawerOpen(false); push({ name: 'course', params: { course: it } }); }}><Text style={styles.subitemText}>{it.title}</Text></TouchableOpacity>
              ))}
            </View>
          ))}

          <TouchableOpacity style={[styles.moduleBtn, { marginTop: 12 }]} onPress={() => { setDrawerOpen(false); push({ name: 'about' }); }}><Text style={styles.moduleText}>About</Text></TouchableOpacity>
          <TouchableOpacity style={styles.moduleBtn} onPress={() => { setDrawerOpen(false); push({ name: 'apply', params: { course: '' } }); }}><Text style={styles.moduleText}>Apply</Text></TouchableOpacity>
          <TouchableOpacity style={styles.moduleBtn} onPress={() => { setDrawerOpen(false); if (user && user.id) { push({ name: 'dashboard' }); } else { Alert.alert('Sign in required', 'Please sign in to access the dashboard'); } }}><Text style={styles.moduleText}>My Dashboard</Text></TouchableOpacity>
        </ScrollView>
      </Animated.View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  header: { height: HEADER_HEIGHT, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 16, borderBottomWidth: 1, borderBottomColor: '#eee' },
  hamburger: { padding: 8 },
  hLine: { width: 22, height: 2, backgroundColor: '#333', marginVertical: 2 },
  headerLogo: { width: 140, height: 80 },
  logoutTop: { paddingHorizontal: 10, paddingVertical: 6 },
  logoutTopText: { color: '#c62828', fontWeight: '700' },
  body: { flex: 1 },
  content: { padding: 20, paddingBottom: 80 },
  hero: { alignItems: 'center', marginBottom: 16 },
  heroTitle: { fontSize: 20, fontWeight: '800', textAlign: 'center', marginTop: 8 },
  heroSubtitle: { color: '#666', textAlign: 'center', marginTop: 6 },
  ctaRow: { flexDirection: 'row', marginTop: 12 },
  ctaPrimary: { backgroundColor: '#0b5ed7', paddingHorizontal: 16, paddingVertical: 10, borderRadius: 8, marginRight: 8 },
  ctaPrimaryText: { color: '#fff', fontWeight: '700' },
  ctaGhost: { borderColor: '#0b5ed7', borderWidth: 1, paddingHorizontal: 14, paddingVertical: 10, borderRadius: 8 },
  ctaGhostText: { color: '#0b5ed7', fontWeight: '700' },
  section: { marginTop: 18 },
  sectionTitle: { fontSize: 18, fontWeight: '700', marginBottom: 12 },
  courseCard: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', padding: 12, borderRadius: 8, backgroundColor: '#f8f9fb', marginBottom: 10 },
  courseInfo: { flex: 1, paddingRight: 8 },
  courseTitle: { fontWeight: '700' },
  courseSubtitle: { color: '#666', marginTop: 4 },
  applyBtn: { backgroundColor: '#198754', paddingHorizontal: 12, paddingVertical: 8, borderRadius: 6 },
  applyText: { color: '#fff', fontWeight: '700' },
  partnersRow: { flexDirection: 'row', flexWrap: 'wrap' },
  partnerBox: { backgroundColor: '#eef2ff', padding: 10, borderRadius: 6, marginRight: 8, marginBottom: 8 },
  partnerText: { color: '#1f2f7a', fontWeight: '600' },
  drawer: { position: 'absolute', top: HEADER_HEIGHT - 8, left: 0, bottom: 0, width: 320, maxWidth: '86%', backgroundColor: '#fff', padding: 12, elevation: 12, shadowColor: '#000', shadowOpacity: 0.12, shadowRadius: 10, borderTopRightRadius: 12, borderBottomRightRadius: 12 },
  drawerHeader: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 8 },
  moduleBtn: { paddingVertical: 12 },
  moduleText: { fontSize: 15, color: '#333', fontWeight: '600' },
  subitemBtn: { paddingVertical: 10, paddingLeft: 12 },
  subitemText: { color: '#444' },
  placeholder: { flex: 1, alignItems: 'center', justifyContent: 'center' },
  courseListItem: { flexDirection: 'row', alignItems: 'center', padding: 12, backgroundColor: '#fff', borderRadius: 8, marginBottom: 8, borderWidth: 1, borderColor: '#f1f3f5' },
  stackHeader: { height: 56, flexDirection: 'row', alignItems: 'center', paddingHorizontal: 12, borderBottomWidth: 1, borderBottomColor: '#eee' }
});

export default MainScreen;
